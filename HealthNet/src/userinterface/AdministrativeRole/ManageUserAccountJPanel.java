/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.regex.*;

/**
 *
 * @author saket
 */
public class ManageUserAccountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccountJPanel
     */
    private JPanel container;
    private Enterprise enterprise;

    public ManageUserAccountJPanel(JPanel container, Enterprise enterprise) {
        initComponents();
        this.enterprise = enterprise;
        this.container = container;

        popOrganizationComboBox();
        popData();
    }

    public void popOrganizationComboBox() {
        cborganization.removeAllItems();

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizations()) {
            if (!(organization instanceof PatientOrganization)) {
                cborganization.addItem(organization);
            }
        }
    }

    public void populateEmployeeComboBox(Organization organization) {
        cbEmployee.removeAllItems();

        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
            cbEmployee.addItem(employee);
        }
    }

    private void populateRoleComboBox(Organization organization) {
        cbRole.removeAllItems();
        for (Role role : organization.getSupportedRole()) {
            cbRole.addItem(role);
        }
    }

    public void popData() {

        DefaultTableModel model = (DefaultTableModel) tblUser.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizations()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                Object row[] = new Object[2];
                row[0] = ua;
                row[1] = ua.getRole();
                ((DefaultTableModel) tblUser.getModel()).addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createUserJButton = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        lblPassword = new javax.swing.JLabel();
        lblEmployee = new javax.swing.JLabel();
        cbEmployee = new javax.swing.JComboBox();
        btnBack = new javax.swing.JButton();
        lblOrgnization = new javax.swing.JLabel();
        cborganization = new javax.swing.JComboBox();
        lblRole = new javax.swing.JLabel();
        cbRole = new javax.swing.JComboBox();
        txtPassword = new javax.swing.JPasswordField();
        lblValidatePassword = new javax.swing.JLabel();
        txtPasswordConfirm = new javax.swing.JPasswordField();
        lblManageUser = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(153, 255, 204));

        createUserJButton.setBackground(new java.awt.Color(0, 0, 0));
        createUserJButton.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        createUserJButton.setForeground(new java.awt.Color(153, 255, 204));
        createUserJButton.setText("CREATE");
        createUserJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUserJButtonActionPerformed(evt);
            }
        });

        txtName.setBackground(new java.awt.Color(242, 242, 242));
        txtName.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblUsername.setBackground(new java.awt.Color(0, 0, 0));
        lblUsername.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(153, 255, 204));
        lblUsername.setText("USERNAME");

        tblUser.setBackground(new java.awt.Color(242, 242, 242));
        tblUser.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblUser);
        if (tblUser.getColumnModel().getColumnCount() > 0) {
            tblUser.getColumnModel().getColumn(0).setResizable(false);
            tblUser.getColumnModel().getColumn(1).setResizable(false);
        }

        lblPassword.setBackground(new java.awt.Color(0, 0, 0));
        lblPassword.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(153, 255, 204));
        lblPassword.setText("PASSWORD");

        lblEmployee.setBackground(new java.awt.Color(0, 0, 0));
        lblEmployee.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        lblEmployee.setForeground(new java.awt.Color(153, 255, 204));
        lblEmployee.setText("EMPLOYEE");

        cbEmployee.setBackground(new java.awt.Color(242, 242, 242));
        cbEmployee.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        cbEmployee.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(153, 255, 204));
        btnBack.setText("<< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblOrgnization.setBackground(new java.awt.Color(0, 0, 0));
        lblOrgnization.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        lblOrgnization.setForeground(new java.awt.Color(153, 255, 204));
        lblOrgnization.setText("ORGANIZATION");

        cborganization.setBackground(new java.awt.Color(242, 242, 242));
        cborganization.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        cborganization.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cborganization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cborganizationActionPerformed(evt);
            }
        });

        lblRole.setBackground(new java.awt.Color(0, 0, 0));
        lblRole.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        lblRole.setForeground(new java.awt.Color(153, 255, 204));
        lblRole.setText("ROLE");

        cbRole.setBackground(new java.awt.Color(242, 242, 242));
        cbRole.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        cbRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtPassword.setBackground(new java.awt.Color(242, 242, 242));
        txtPassword.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPasswordKeyReleased(evt);
            }
        });

        lblValidatePassword.setBackground(new java.awt.Color(0, 0, 0));
        lblValidatePassword.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        lblValidatePassword.setForeground(new java.awt.Color(153, 255, 204));
        lblValidatePassword.setText("RE-ENTER PASSWORD");

        txtPasswordConfirm.setBackground(new java.awt.Color(242, 242, 242));
        txtPasswordConfirm.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        txtPasswordConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordConfirmActionPerformed(evt);
            }
        });

        lblManageUser.setBackground(new java.awt.Color(0, 0, 0));
        lblManageUser.setFont(new java.awt.Font("Avenir Next", 1, 14)); // NOI18N
        lblManageUser.setForeground(new java.awt.Color(153, 255, 204));
        lblManageUser.setText("MANAGE USER ACCOUNT");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblValidatePassword)
                                    .addComponent(lblEmployee)
                                    .addComponent(lblOrgnization)
                                    .addComponent(lblRole)
                                    .addComponent(lblUsername)
                                    .addComponent(lblPassword))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cborganization, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(createUserJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnBack)
                            .addGap(195, 195, 195)
                            .addComponent(lblManageUser))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(150, 150, 150)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(550, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblManageUser)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblOrgnization))
                    .addComponent(cborganization, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbEmployee)
                    .addComponent(lblEmployee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRole)
                    .addComponent(lblRole))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName)
                    .addComponent(lblUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPasswordConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValidatePassword))
                .addGap(30, 30, 30)
                .addComponent(createUserJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(193, 193, 193))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createUserJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUserJButtonActionPerformed
        String userName = txtName.getText();
        String password = String.valueOf(txtPassword.getPassword());
        String rePassword = String.valueOf(txtPasswordConfirm.getPassword());
        Organization organization = (Organization) cborganization.getSelectedItem();
        Employee employee = (Employee) cbEmployee.getSelectedItem();
        Role role = (Role) cbRole.getSelectedItem();
            
        if (userName.trim().isEmpty() || password.trim().isEmpty())
        {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            JOptionPane.showMessageDialog(null, "Username and Password cannot be empty");
        } else if  (!password.equals(rePassword)) {
            JOptionPane.showMessageDialog(null, "Passwords don't match");
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtPasswordConfirm.setBorder(BorderFactory.createLineBorder(Color.RED));
            return;
        }
        else {
            List<UserAccount> userAccountList = organization.getUserAccountDirectory().getUserAccountList();
            for (UserAccount userAccount : userAccountList) {
                if (userAccount.getUsername().equals(userName)) {
                    JOptionPane.showMessageDialog(null, "username already taken!!");
                    txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
                    return;
                }
                
        }
            organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
            popData();
            txtName.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtPasswordConfirm.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtPassword.setText("");
            txtPasswordConfirm.setText("");
            txtName.setText("");
        }
    }//GEN-LAST:event_createUserJButtonActionPerformed

    private boolean passwordPatternValidation() {
    Pattern p = Pattern.compile("^(?=.*[0-9])(?=.*[a-z])\\S{5,20}$");
    Matcher m = p.matcher(String.valueOf(txtPassword.getPassword()));
    return m.matches();
}


    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cborganizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cborganizationActionPerformed
        Organization organization = (Organization) cborganization.getSelectedItem();
        if (organization != null) {
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }
    }//GEN-LAST:event_cborganizationActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtPasswordConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordConfirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordConfirmActionPerformed

    private void txtPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyReleased
        // TODO add your handling code here:
//        if (!passwordPatternValidation()) {
//            JOptionPane.showMessageDialog(null, "It contains at least 5 characters and at most 20 characters.\n" +
//                                 "It contains at least one digit.\n" +
//                                 "It contains at least one upper case alphabet.\n" +
//                                 "It contains at least one lower case alphabet.\n" +
//                                 "It contains at least one special character which includes !@#$%&*()-+=^.\n" +
//                                 "It doesn’t contain any white space.");
//            txtPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
//            return;
//        }
    
        
        
    }//GEN-LAST:event_txtPasswordKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox cbEmployee;
    private javax.swing.JComboBox cbRole;
    private javax.swing.JComboBox cborganization;
    private javax.swing.JButton createUserJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblManageUser;
    private javax.swing.JLabel lblOrgnization;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblValidatePassword;
    private javax.swing.JTable tblUser;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordConfirm;
    // End of variables declaration//GEN-END:variables
}
